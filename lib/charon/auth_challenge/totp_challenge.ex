defmodule Charon.AuthChallenge.TotpChallenge do
  @moduledoc """
  TOTP-challenge.
  The otp codes may be generated by the user's device,
  or can be sent in advance by SMS/email.
  """
  @challenge_name "totp"
  use Charon.AuthChallenge

  if Code.ensure_loaded?(NimbleTOTP) do
    alias Charon.Internal
    @custom_config_field :charon_totp_challenge
    @defaults %{
      totp_seed_field: :totp_seed,
      new_totp_seed_field: :new_totp_seed,
      otp_param: "otp",
      period: 30
    }
    @required [:totp_label, :totp_issuer]

    @impl true
    def challenge_complete(user, params, config) do
      with :ok <- AuthChallenge.verify_enabled(user, @challenge_name, config) do
        %{totp_seed_field: field, otp_param: otp_param, period: period} = process_config(config)
        seed = Map.fetch!(user, field)
        otp = Map.fetch!(params, otp_param)
        now = Internal.now()

        if NimbleTOTP.valid?(seed, otp, time: now, period: period) or
             NimbleTOTP.valid?(seed, otp, time: now - period, period: period) do
          :ok
        else
          {:error, "#{otp_param} invalid"}
        end
      end
    end

    @impl true
    def setup_init(user, conn, config) do
      %{totp_label: label, totp_issuer: issuer, new_totp_seed_field: new_field} =
        process_config(config)

      seed = :crypto.strong_rand_bytes(32)
      secret = Base.encode32(seed, padding: false, case: :upper)
      uri = NimbleTOTP.otpauth_uri(label, seed, issuer: issuer)
      {:ok, _} = AuthChallenge.update_user(user, %{new_field => seed}, config)
      {:ok, %{secret: secret, uri: uri}, conn}
    end

    @impl true
    def setup_complete(user, params, config) do
      %{totp_seed_field: field, new_totp_seed_field: new_field} = process_config(config)
      seed = Map.get(user, new_field)
      user_overrides = %{field => seed, config.enabled_auth_challenges_field => [@challenge_name]}

      with :ok <- challenge_complete(Map.merge(user, user_overrides), params, config),
           enabled = AuthChallenge.put_enabled(user, @challenge_name, config) do
        params = %{field => seed, config.enabled_auth_challenges_field => enabled}
        {:ok, _} = AuthChallenge.update_user(user, params, config)
        :ok
      end
    end

    @doc false
    def generate_code(user, config) do
      %{totp_seed_field: field, period: period} = process_config(config)
      seed = Map.fetch!(user, field)
      now = Internal.now()
      NimbleTOTP.verification_code(seed, time: now, period: period)
    end

    defp process_config(config) do
      Internal.process_custom_config(config, @custom_config_field, @defaults, @required)
    end
  else
    @impl true
    def challenge_init(_user, _config), do: throw_error()
    @impl true
    def challenge_complete(_user, _params, _config), do: throw_error()
    @impl true
    def setup_init(_user, _config), do: throw_error()
    @impl true
    def setup_complete(_user, _params, _config), do: throw_error()
    def generate_code(_user, _config), do: throw_error()

    defp throw_error(), do: raise("optional dependency NimbleTOTP not found")
  end
end
